
module type STRATEGY =
sig
  type 'a t

  (**The capacity increase algorithm, when we add an element, if we hit the end of
      the sarray, we grow the sarray by two.*)
  val grow : 'a t -> 'a t

  (**The capacity decrease algorithm, when we remove an element
     if less than a third of the total capacity is used, we divide the capacity by two.*)
  val decrease : 'a t -> 'a t
end

module type ARRAY = 
sig
  type 'a t
  val empty : 'a t

  (**The current number of elements contained in the Srray.*)
  val length : 'a t -> int

  (**The entire capacity of the Sarray.*)
  val capacity : 'a t -> int

  (**Access an element by its index.*)
  val get : int -> 'a t -> 'a

  (**Add a value at the end of the Sarray*)
  val push : 'a -> 'a t -> 'a t

  (**Remove the last element*)
  val pop : 'a t -> 'a t

  (**Remove the head*)
  val shift : 'a t -> 'a t

  (**Add to the head*)
  val unshift : 'a -> 'a t -> 'a t

  val indexOf : 'a -> 'a t -> int

  (**Remove n element from pos*)
  val splice : int -> int -> 'a t -> 'a t

  (**Give a subset of the Sarray from x to y*)
  val slice : int -> int -> 'a t

end